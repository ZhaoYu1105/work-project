apply plugin: 'java'
apply plugin: 'groovy'
apply plugin: 'org.springframework.boot'
apply plugin: "com.gorylenko.gradle-git-properties" // 生成 git.properties

dependencies {
    compile project(":qh-agency-service")
    compile project(":qh-agency-api")
    compile project(":qh-agency-msg-impl")


    compile('org.codehaus.groovy:groovy')
    compile('org.springframework.boot:spring-boot-starter-web')
    compile('org.springframework.boot:spring-boot-starter-thymeleaf')
    compile("org.springframework.boot:spring-boot-devtools")

    compile('org.springframework.boot:spring-boot-starter-security')
    compile('org.springframework.security.oauth:spring-security-oauth2')
    compile('org.springframework.security:spring-security-jwt')

    compile('org.springframework.boot:spring-boot-starter-data-mongodb')
    compile('com.fasterxml.jackson.dataformat:jackson-dataformat-xml')

    compile('org.apache.httpcomponents:httpclient')

    compile('com.fasterxml.jackson.dataformat:jackson-dataformat-xml')
    compile('com.fasterxml.jackson.module:jackson-module-parameter-names')
    compile('com.fasterxml.jackson.datatype:jackson-datatype-jdk8')
    compile('com.fasterxml.jackson.datatype:jackson-datatype-jsr310')



    compile('org.springframework.boot:spring-boot-starter-jersey')
    compile('org.glassfish.jersey.ext:jersey-spring3')


    compile('com.querydsl:querydsl-mongodb')
    compile('com.querydsl:querydsl-apt')
    compile('com.querydsl:querydsl-core')
    compile('joda-time:joda-time')

    //compile('org.mongodb.morphia:morphia')
    //querydslapt('com.querydsl:querydsl-apt')

    testCompile('org.springframework.boot:spring-boot-starter-test')

    compile("io.swagger:swagger-core")
    compile('io.swagger:swagger-jersey2-jaxrs')
    compile('org.webjars:swagger-ui')

//    compile("io.springfox:springfox-swagger2")
//    compile("io.springfox:springfox-data-rest")
//    compile("io.springfox:springfox-staticdocs")
//    compile('io.springfox:springfox-swagger-ui')

    compile 'org.apache.poi:poi'
    compile 'org.apache.poi:poi-ooxml'

    compile('org.springframework.boot:spring-boot-starter-data-elasticsearch')
    compile('org.springframework.data:spring-data-elasticsearch')
//    compile('org.springframework.integration:spring-integration-amqp')
//    compile('org.springframework.integration:spring-integration-core')
//    compile('org.springframework.integration:spring-integration-event')
//    compile('org.springframework.integration:spring-integration-file')
//    //compile('org.springframework.integration:spring-integration-gemfire')
//    compile('org.springframework.integration:spring-integration-mongodb')
//    compile('org.springframework.integration:spring-integration-mqtt')
//    compile('org.springframework.integration:spring-integration-redis')
//    compile('org.springframework.integration:spring-integration-security')
//    compile('org.springframework.integration:spring-integration-stream')
//    compile('org.springframework.integration:spring-integration-websocket')
//    compile('org.springframework.integration:spring-integration-zookeeper')


}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}
task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives sourcesJar
    //archives javadocJar
}

test {
    testLogging.showStandardStreams = false
}


bootRun {
    addResources = true
    systemProperties = System.properties
}

springBoot {
    //mainClass = System.properties['mainClass']
    buildInfo {
        additionalProperties = [
                'foo': 'bar'
        ]
    }
}

jar {
    manifest {
        attributes "Implementation-Version": project.version
    }
}